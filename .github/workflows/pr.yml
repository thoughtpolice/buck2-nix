name: PR Validation

on:
  # needs read/write GH token, do *not* execute arbitrary code from PR
  pull_request_target:
    types: [ opened, synchronize, edited ]

jobs:
  check-pr:
    name: "check: Validate PR title"
    runs-on: ubuntu-latest
    steps:
      - name: "Run validation script"
        uses: actions/github-script@v6.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // after bors merges something, it updates the pr title, so we
            // have to skip that case
            if (  context.actor === 'bors[bot]'
               && context.payload.action === 'edited'
               && pr.title.startsWith('[Merged by Bors] -')) {
              console.log(`Action triggered by bors merging a pull request; skipping...`);
              return;
            }

            console.log(`Title: ${pr.title}`);
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            var actions_state = null;
            for (const r of reviews) {
              console.log(`Existing review by id=${r.user.id} (${r.user.login})`);
              if (r.user.id == 41898282 /* github-actions[bot] */) {
                // reviews are immutable, and always in chronological order, so
                // don't break from the loop on a hit; we need to get the latest
                // review by the bot
                actions_state = r.state;
              }
            }

            if (!/^(feat|fix|doc|perf|refactor|test|chore)\((\w+)\): (.*[^.])$/.test(pr.title)) {
              var msg = 'Failing CI check due to bad PR title; skipping review (it already exists)';
              if (actions_state !== 'CHANGES_REQUESTED') {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  event: 'REQUEST_CHANGES',
                  body: 'PR title is incorrectly formatted. Please fix it before this can be merged.'
                });
                msg = 'Failing CI check due to bad PR title, and left a REQUEST_CHANGES review';
              }
              await core.setFailed(msg);
            } else {
              var msg = 'Success; PR title is valid; skipping review (it already exists)';
              if (actions_state !== 'APPROVED') {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  event: 'APPROVE',
                  body: 'PR title is correctly formatted. Thanks!'
                });
                msg = 'Success; PR title is valid; and leaving APPROVE review';
              }
              console.log(msg);
            }
