name: Continuous Integration

on:
  push:
    branches: [ main, trying, staging ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: "build: Full build and integrated tests"
    runs-on: ubuntu-latest
    steps:
      - name: install nix
        uses: cachix/install-nix-action@v18
        with:
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
          nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/8ba90bbc63e58c8c436f16500c526e9afcb6b00a.tar.gz
          # see [ref:cache-url-warning]
          extra_nix_config: |
            substituters = file://${{ github.workspace }}/nix-store-cache-copy?priority=10&trusted=true https://cache.nixos.org https://buck2-nix-cache.aseipp.dev
            experimental-features = nix-command flakes recursive-nix ca-derivations
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= buck2-nix-preview.aseipp.dev-1:sLpXPuuXpJdk7io25Dr5LrE9CIY1TgGQTPC79gkFj+o=

      # [tag:lean4-nix-ci-copy] (aseipp): The following is a copy of lean4's
      # "nix-ci.yml" file, with some modifications. In the future, we may want
      # to occasionally re-synchronize it if necessary
      - name: setup nix cache
        uses: actions/cache@v3
        with:
          path: nix-store-cache
          key: nix-store-cache-${{ github.sha }}
          # fall back to (latest) previous cache
          restore-keys: |
            nix-store-cache
      - name: setup nix cache (pt 2)
        shell: bash -euxo pipefail {0}
        run: |
          # Nix seems to mutate the cache, so make a copy
          cp -r nix-store-cache nix-store-cache-copy || true

      # [tag:github-ci-nix-tools] (aseipp): run the following command every once
      # in a while:
      #
      #     nix build nixpkgs#direnv --no-link --print-out-paths
      #
      # then put the paths down below in the "nix-env -i" command. This will
      # install prebuilt copies of these tools that are known to work, and come
      # from cache.nixos.org; we also put them in the local GH actions cache so
      # installation will be faster. This improves performance versus building
      # and evaluating them, and CI is largely insensitive to these versions
      # anyway.
      - name: install needed tools (nix-env)
        run: |
          paths=(
            /nix/store/51mhhh1796njxk8h58l45j904pakvqvj-direnv-2.32.2
          )

          echo "${paths[@]}" | xargs nix build -o push-tools
          sudo -i nix-env -i ${paths[@]}

      - name: sl clone buck2-nix.sl
        env:
          SHELL: /bin/bash
        run: |
          nix run \
            --accept-flake-config \
            'github:thoughtpolice/buck2-nix?dir=installer' \
            -- --skip-confirm -s sl -c ${{ github.workspace }}/${{ github.event.repository.name }}.sl

          # XXX HACK: there's no way to 'bare init' a sapling repo, it seems...
          shopt -s dotglob
          mv ${{ github.workspace }}/${{ github.event.repository.name }}.sl/* .

      - name: direnv export
        uses: ./.github/actions/direnv

      - name: buck build ...
        run: buck build root//... nix//...

      - name: build package output paths for cache
        run: |
          nix build --accept-flake-config --no-link --print-out-paths ./buck/nix#attrs \
            | xargs cat \
            | xargs printf './buck/nix#%s\n' \
            | xargs nix build --accept-flake-config -o push-pkgs

      - name: rebuild nix store cache
        run: |
          rm -rf nix-store-cache || true
          nix copy ./push-* --to file://$PWD/nix-store-cache?compression=none
